Этот код позволяет пользователю управлять цветами адресуемых светодиодов, интегрированных 
в ленту WS2812, подключенную к Raspberry Pi, с помощью текстового ввода.

smart_led1.4_withoutmqtt
1.	Импортируем модуль time для задачи задержек

Import time

2.	Импортируем классы PixelStrip и Color из библиотеки rpi_ws281x, для управления 
адресуемыми светодиодными лентами WS2812 на Raspberry Pi

from rpi_ws281x import PixelStrip, Color

3.	Объявляем переменную LED_COUNT и устанавливаем количество светодиодов 16

LED_COUNT = 16

4.	Указываем, что светодиодная лента подключена к GPIO пину 18

LED_PIN = 18

5.	Задаем частоту передачи данных на 800 кГц (стандартное значения для WS2812)

LED_FREQ_HZ = 800000

6.	Выбираем 10 DMA канал, который будет использован для передачи данных

LED_DMA = 10

7.	Устанавливаем максимальную яркость светодиодов на 255

LED_BRIGHTNESS = 255

8.	Задаем инвертирование сигнала, по умолчанию не инвертирован

LED_INVERT = False

9.	Устанавливаем номер канала для управления светодиодами (по умолчанию 0)

LED_CHANNEL = 0

10.	Объявляем переменную strip (лента) которому присваиваем объект класса PixelStrip, 
передавая ему все параметры конфигурации, которые мы указали ранее

strip = PixelStrip(LED_COUNT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS, LED_CHANNEL)

11.	Инициализируем светодиоды, чтобы они начали принимать команды

strip.begin()

12.	Определяем функцию set_color, которая принимает параметр color 
(нужна для установки цвета светодиода)

def set_color(color):

13.	Инициализируем цикл, который проходит по каждому светодиоду
(их количество определяется с помощью numPixels())

for i in range(strip.numPixels()):

14.	Устанавливаем цвет текущего светодиода i в заданный color

strip.setPixelColor(i, color)

15.	Обновляем состояние светодиодов, чтобы изменения отобразились

strip.show()

16.	Определяем функцию clear_leds, которая выключает все светодиоды

def clear_leds():

17.	Инициализируем цикл по всем светодиодам

for i in range(strip.numPixels()):

18.	Устанавливаем цвет каждого светодиода на выключенный (черный(?))

strip.setPixelColor(i, Color(0, 0, 0))

19.	Обновляем состояние светодиодов, чтобы изменения отобразились

strip.show()

20.	Напишем блок try для обработки возможных исключений во время выполнения кода

try:

21.	Создаем бесконечный цикл, который будет запрашивать ввод от пользователя

while True:

22.	Запрашиваем у пользователя ввод цвета в формате RGB или команды off, 
для выключения светодиодов (данные записываются в переменную command)

command = input("Введите цвет в формате 'r, g, b' или 'off' для выключения: ")

23.	Если было введено off, то отключаем светодиоды

if command.lower() == "off":
clear_leds()

24.	Если было введено не off, то продолжаем выполнять другую часть блока

else:
try:

25.	Разбиваем введенную строку на три части с помощью split, 
которая разделит их по запятым на пробелы и с помощью map(int, r, g, b) 
присвоятся значения переменным r, g, b и поменяет их тип данных на int с str

r, g, b = map(int, command.split(','))

26.	Вызываем функцию set_color, передавая ей объект Color,
созданный с использованием ранее полученных значений r, g, b

set_color(Color(r, g, b))

27.	Если в данном блоке возникает ошибка, то обрабатывается исключение 
не валидных данных и на экран выводится «Ошибка: некорректный формат данных. Попробуйте снова.»

Except ValueError:
print("Ошибка: некорректный формат данных. Попробуйте снова.")

28.	Для того, чтобы прекратить выполнение программы, 
достаточно определить исключение KeyboardInterrupt, 
которое считывает ctrl+c и в нем прописать очистку светодиодов 
и вывести «Программа завершена».

except KeyboardInterrupt:
clear_leds()
print("\nПрограмма завершена.")


